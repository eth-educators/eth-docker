# Custom Prometheus rules. Use prometheus/custom-prom.yml which will be appended to
# /etc/prometheus/prometheus.yml inside the prometheus container. It will be appended after
# the last scrape target that the entrypoint script adds.
#
# You could add additional scrape targets as well as additional global sections such as remote-write.
# This file is called grafana-cloud.yml as adding a remote write to Grafana Cloud is likely a
# common use case. It properly is a Prometheus without Grafana and the ability to add custom
# content to prometheus.yml

version: "3.9"
x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  prometheus:
    restart: "unless-stopped"
    build:
      context: ./prometheus
    image: prometheus:local
    volumes:
      - prom-data:/prometheus
      - ./prometheus/custom-prom.yml:/etc/prometheus/custom-prom.yml:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - CLIENT=${COMPOSE_FILE}
    entrypoint: choose-config.sh
    command: ["/bin/prometheus", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/usr/share/prometheus/console_libraries", "--web.console.templates=/usr/share/prometheus/consoles"]
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.prom.entrypoints=web,websecure
      - traefik.http.routers.prom.rule=Host(`${PROM_HOST}.${DOMAIN}`)
      - traefik.http.routers.prom.tls.certresolver=letsencrypt
      - traefik.http.services.prom.loadbalancer.server.port=9090

  ethereum-metrics-exporter:
    restart: "unless-stopped"
    build:
      context: ./eth-metrics
    image: ethereum-metrics-exporter:local
    environment:
      - CLIENT=${COMPOSE_FILE}
    entrypoint:
      - docker-entrypoint.sh
      - /ethereum-metrics-exporter
    <<: *logging

  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
#      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=${NODE_EXPORTER_IGNORE_MOUNT_REGEX}'
      - '--no-collector.ipvs'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
      - /etc/hostname:/etc/nodename:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/localtime:/etc/localtime:ro
    <<: *logging

  blackbox-exporter:
    restart: "unless-stopped"
    image: prom/blackbox-exporter:master
    volumes:
      - ./prometheus/blackbox.yml:/config/blackbox.yml
      - /etc/localtime:/etc/localtime:ro
    <<: *logging
    command:
      - --config.file=/config/blackbox.yml

  json-exporter:
    restart: "unless-stopped"
    image: prometheuscommunity/json-exporter:latest
    volumes:
      - ./prometheus/json.yml:/config/json.yml
      - /etc/localtime:/etc/localtime:ro
    <<: *logging
    command:
      - --config.file
      - /config/json.yml

  cryptowat-exporter:
    restart: "unless-stopped"
    image: nbarrientos/cryptowat_exporter:latest
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - CRYPTOWAT_EXCHANGES=kraken
      - CRYPTOWAT_PAIRS=etheur,ethusd,ethgbp,ethcad,ethchf,ethjpy,ethbtc
      - CRYPTOWAT_CACHESECONDS=300
      - TZ=Europe/Zurich
    <<: *logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    command:
      - --docker_only
      - --housekeeping_interval=30s
    <<: *logging

  promtail:
    image: grafana/promtail:latest
    user: root
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - ./promtail:/etc/promtail
      - promtail-data:/tmp
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    entrypoint: ./etc/promtail/entrypoint.sh
    command: ["/usr/bin/promtail"]
    environment:
      SERVER_LABEL_HOSTNAME: ${LOGS_LABEL:-notset}
    restart: "unless-stopped"
    <<: *logging

volumes:
  prom-data:
  promtail-data:
