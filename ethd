#!/bin/bash
#set -euo pipefail
set -uo pipefail

__compose_exe="docker-compose"

cmd() {
    $__compose_exe "$@"
}

determine_distro() {
    # Determine OS platform
    __uname=$(uname | tr "[:upper:]" "[:lower:]")
    # If Linux, try to determine specific distribution
    if [ "$__uname" == "linux" ]; then
        # If available, use LSB to identify distribution
        if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then
            __distro=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
        # Otherwise, use release info file
        else
            __distro=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
        fi
    else
        __distro=""
    fi
    # For everything else (or if above failed), just use generic identifier
    [ "$__distro" == "" ] && __distro=$__uname
    unset __uname
    __distro=$(echo $__distro | tr "[:upper:]" "[:lower:]")
}

determine_compose() {
# This is mainly for Debian and docker-ce, where docker-compose does not exist
  type -P docker-compose >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    __compose_exe="docker compose"
  else
    __compose_exe="docker-compose"
  fi
}

handle_root() {
    if [ "${EUID}" -eq 0 ]; then
        __as_owner="sudo -u ${OWNER}"
    else
        __as_owner=""
    fi
}

update() {
    if [ -z "${ETHDSECUNDO-}" ]; then
        if ${__as_owner} git branch | grep -q master; then
            ${__as_owner} git branch -m master main
            ${__as_owner} git fetch origin
            ${__as_owner} git branch -u origin/main main
            ${__as_owner} git remote set-head origin -a
        fi
        # Do not track changes to ext-network.yml
        ${__as_owner} git update-index --assume-unchanged ext-network.yml
        ${__as_owner} git pull
        # BASH_SOURCE so newer code gets to do the update. Use an ENV var
        # to avoid infinite loop
        export ETHDSECUNDO=1
        exec "${BASH_SOURCE}" update $@
    fi

    __keeptargets=0
    __targetcli=""
    while :
    do
        if [ -z ${1+x} ]; then
            break
        fi
        case "$1" in
            --keep-targets)
                __keeptargets=1
                __targetcli="--keep-targets"
                shift
                ;;
            *)
                echo "Error: Unknown option: $1" >&2
                exit 1
                ;;
        esac
    done

    if ${__as_owner} git branch --show-current | grep -q rpc-nodes; then
        __rpc_branch=1
    else
        __rpc_branch=0
    fi

    envmigrate

    if [ "${__switched_branch-}" -eq 1 ]; then
        # This code has changed, run it again on the new branch
        export ETHDSECUNDO=1 #Not strictly necessary but this way we don't rely on what happens earlier
        export ETHDSWITCHED=1
        exec "${BASH_SOURCE}" update $__targetcli
    fi

    cmd build --pull
    exec 3>&1
    exec 4>&2
    exec 1> /dev/null
    exec 2> /dev/null
    cmd pull || true
    exec 1>&3
    exec 2>&4
    echo
    echo "Your ${ENV_FILE} configuration settings have been migrated to a fresh copy. You can \
find the original contents in ${ENV_FILE}.bak."

    if [ $__keeptargets = "0" ]; then
      echo "NB: If you made changes to the source or binary build targets, these have NOT \
been migrated, please recreate these changes yourself."
    fi
    echo
    cmp -s "${ENV_FILE}" "${ENV_FILE}".bak
    if [ $? -ne 0 ]; then
        echo "List of changes made to ${ENV_FILE} during migration - current on left, original on right:"
        echo
        diff -y --suppress-common-lines "${ENV_FILE}" "${ENV_FILE}".bak
    else
        echo "No changes made to ${ENV_FILE} during migration"
    fi
    if [[ "$__distro" = "ubuntu" && -n $(which snap) && -n $(snap list 2>/dev/null | grep -w "docker") ]]; then
        echo
        echo "WARNING! Snap docker package detected. This WILL result in issues."
        echo "Removing the package will delete volumes and require a resync,"
        echo "as well as re-import of all validator keys."
        echo
        echo "Doing so is still highly recommended however."
        echo
        echo "The exact steps depend a little on whether there already is"
        echo "an apt version of docker installed as well, but in a nutshell"
        echo '"./ethd stop" followed by "sudo snap remove --purge docker"'
        echo "and then reinstall docker.io or docker-ce with apt,"
        echo "re-import keys and restart eth-docker."
        echo
        echo "Do join us on EthStaker Discord to work through this emergency."
    fi
    unset ETHDSECUNDO
    if [[ ${ETHDSWITCHED-} -eq 1 ]]; then
        unset ETHDSWITCHED
        echo
        echo "You were migrated to the $(${__as_owner} git branch --show-current) branch of eth-docker"
        echo
    fi
    # If this is called by an older version of ethd, envmigrate
    # is in its own bash instance: Need to kill the ethd parent
    if ps $PPID | grep -q "ethd"; then
        echo
        echo "Updated from an older version of eth-docker. You'll see \"Terminated\","
        echo "which keeps the update from running twice. This is normal and will"
        echo "only happen this once."
        echo
        kill $PPID
    fi
}

envmigrate() {
    if [ -z "${ETHDSECUNDO-}" ]; then
        # We'd only ever hit this if called from an older version of ethd, so let's
        # get the new version executed.
        export ETHDSECUNDO=1
        # Account for different ways that envmigrate was called in older code and
        # set keep-targets correctly regardless
        if [ -z "${KEEPTARGETS-}" ]; then
            __keep=""
            for var in "$@"; do
                if [ "$var" = "--keep-targets" ]; then
                    __keep="--keep-targets"
                fi
            done
        else
            __keep=""
            if [ ${KEEPTARGETS-} -eq 1 ]; then
                __keep="--keep-targets"
            fi
        fi
        exec "${BASH_SOURCE}" update ${__keep}
    fi

    if [ ! -f "./${ENV_FILE}" ]; then
        return
    fi
    ALL_VARS=( COMPOSE_FILE FEE_RECIPIENT EL_NODE EL_FALLBACK_NODE1 EL_FALLBACK_NODE2 GRAFFITI NETWORK EL_NETWORK \
            CL_MAX_PEER_COUNT CL_MIN_PEER_COUNT EL_MAX_PEER_COUNT EL_MIN_PEER_COUNT DOMAIN ACME_EMAIL CF_EMAIL \
            CF_API_TOKEN AWS_PROFILE AWS_HOSTED_ZONE_ID GRAFANA_HOST DISTRIBUTED \
            PROM_HOST PRYSM_HOST EL_HOST EL_WS_HOST DDNS_SUBDOMAIN DDNS_PROXY RAPID_SYNC_URL \
            CL_NODE BEACON_STATS_API BEACON_STATS_MACHINE HOST_IP EL_P2P_PORT CL_P2P_PORT PRYSM_PORT  \
            PRYSM_UDP_PORT GRAFANA_PORT KEY_API_PORT TRAEFIK_WEB_PORT TRAEFIK_WEB_HTTP_PORT \
            EL_RPC_PORT EL_WS_PORT RESTART LOG_LEVEL GETH_CACHE SSV_P2P_PORT SSV_P2P_PORT_UDP )
    TARGET_VARS=( NIM_SRC_BUILD_TARGET NIM_DOCKER_TAG NIM_DOCKERFILE TEKU_SRC_BUILD_TARGET TEKU_DOCKER_TAG \
                TEKU_DOCKERFILE LH_SRC_BUILD_TARGET LH_DOCKER_TAG LH_DOCKERFILE PRYSM_SRC_BUILD_TARGET \
                PRYSM_DOCKER_TAG PRYSM_DOCKERFILE ERIGON_SRC_BUILD_TARGET ERIGON_DOCKER_TAG ERIGON_DOCKERFILE \
                AKULA_SRC_BUILD_TARGET AKULA_DOCKER_TAG AKULA_DOCKERFILE \
                LS_SRC_BUILD_TARGET LS_DOCKER_TAG LS_DOCKERFILE GETH_SRC_BUILD_TARGET GETH_DOCKER_TAG \
                GETH_DOCKERFILE NM_SRC_BUILD_TARGET NM_DOCKER_TAG NM_DOCKERFILE BESU_SRC_BUILD_TARGET \
                BESU_DOCKER_TAG BESU_DOCKERFILE SSV_NODE_TAG DEPCLI_SRC_BUILD_TARGET DEPCLI_DOCKER_TAG \
                NODE_EXPORTER_IGNORE_MOUNT_REGEX )
    OLD_VARS=( LH_PORT PRYSM_WEB_PORT EC_NODE EC_FALLBACK_NODE1 EC_FALLBACK_NODE2 EC_NETWORK \
	        EC_HOST EC_WS_HOST EC_P2P_PORT CC_NODE CC_P2P_PORT EC_RPC_PORT EC_WS_PORT REWARDS_TO )
    NEW_VARS=( CL_P2P_PORT KEY_API_PORT EL_NODE EL_FALLBACK_NODE1 EL_FALLBACK_NODE2 EL_NETWORK \
	        EL_HOST EL_WS_HOST HOST_IP EL_P2P_PORT CL_NODE CL_P2P_PORT EL_RPC_PORT EL_WS_PORT FEE_RECIPIENT )

    if [ "${EUID}" -eq 0 ]; then
      # Previous version of this tool when run as root may have created a root-owned .env.bak
      if [ -f ./"${ENV_FILE}".bak ]; then
          rm "${ENV_FILE}".bak
      fi
      sudo -u "${OWNER}" cp "${ENV_FILE}" "${ENV_FILE}".bak
      sudo -u "${OWNER}" cp default.env "${ENV_FILE}"
      sudo -u "${OWNER}" cp "${ENV_FILE}".bak .env.source
    else
      cp "${ENV_FILE}" "${ENV_FILE}".bak
      cp default.env "${ENV_FILE}"
      cp "${ENV_FILE}".bak .env.source
    fi
    # Migrate over user settings
    for var in "${ALL_VARS[@]}"; do
        value=$(grep --color=never -Po "^${var}=\K.*" ".env.source" || true)
        if [ -n "${value}" -o "${var}" = "GRAFFITI" ]; then
            if [ "${var}" = "COMPOSE_FILE" ]; then
                migrate_compose_file
            fi
            if [ "${var}" = "NETWORK" ]; then
                check_merge_switch
            fi
            sed -i'.original' -e "s~^\(${var}\s*=\s*\).*$~\1${value}~" "${ENV_FILE}"
        fi
    done
    if [ $__keeptargets = "1" ]; then
      # Migrate over build targets
      for var in "${TARGET_VARS[@]}"; do
          value=$(grep --color=never -Po "^${var}=\K.*" ".env.source" || true)
          if [ -n "${value}" ]; then
              sed -i'.original' -e "s~^\(${var}\s*=\s*\).*$~\1${value}~" "${ENV_FILE}"
          fi
      done
    fi
    # Move value from old variable name(s) to new one(s)
    for index in "${!OLD_VARS[@]}"; do
        var=${OLD_VARS[index]}
        value=$(grep --color=never -Po "^${var}=\K.*" ".env.source" || true)
        if [ -n "${value}" ]; then
            sed -i'.original' -e "s~^\(${NEW_VARS[index]}\s*=\s*\).*$~\1${value}~" "${ENV_FILE}"
        fi
    done
    # Check for rewards
    var="FEE_RECIPIENT"
    value=$(grep --color=never -Po "^${var}=\K.*" ".env" || true)
    if [[ -z "${value}" || ${value} != 0x* || ${#value} -ne 42 ]]; then
        whiptail --msgbox "A fee recipient ETH wallet address is required in order to start the client. This is for post-merge priority fees and, optionally, MEV. Please enter a valid ETH address in the next screen. Refer to eth-docker docs (https://eth-docker.net/docs/About/Rewards) for more information.\n\nCAUTION: \"./ethd restart\" will fail if no valid address is set" 16 75
        query_coinbase
        set_value_in_env
    fi
    # User signals it's a distributed setup and not to nag
    # Ditto do not nag if we switched branch, as the code that does
    # the check won't be accurate
    var="DISTRIBUTED"
    value=$(grep --color=never -Po "^${var}=\K.*" ".env" || true)
    if [[ "${value}" = "true" || "${__switched_branch-}" -eq 1 ]]; then
        rm .env.source
        return
    fi
    # Check for CL and EL
    var="COMPOSE_FILE"
    value=$(grep --color=never -Po "^${var}=\K.*" ".env" || true)
    # Case 1 ... CL, do we have an EL?
    if [[ "${value}" =~ "-base.yml" ]]; then
        if [[ ! "${value}" =~ "geth.yml" && ! "${value}" =~ "besu.yml" && ! "${value}" =~ "erigon.yml" && ! "${value}" =~ "nm.yml" ]]; then
            whiptail --msgbox "An Execution Layer client is required alongside your Consensus Layer client come Ethereum Merge. Refer to eth-docker docs (https://eth-docker.net/docs/About/MergePrep) for more information.\n\nPlease start running your own EL soonest, as Infura will no longer be usable as an EL after The Merge.\n\nIf you run a distributed setup, you can shut off this nag screen by setting DISTRIBUTED=true in .env" 16 75
        fi
    # Case 2 ... EL, do we have a CL?
    elif [[ "${value}" =~ "geth.yml" || "${value}" =~ "besu.yml" || "${value}" =~ "erigon.yml" || "${value}" =~ "nm.yml" ]]; then
        if [[ ! "${value}" =~ "-base.yml" ]]; then
	    whiptail --msgbox "A Consensus Layer client is required alongside your Execution Layer client come Ethereum Merge. Refer to eth-docker docs (https://eth-docker.net/docs/About/MergePrep) for more information.\n\nPlease start running your own CL soonest, as an EL alone will no longer be usable after The Merge.\n\nIf you run a distributed setup, you can shut off this nag screen by setting DISTRIBUTED=true in .env" 16 75
        fi
    fi
    rm .env.source
}

check_merge_switch() {
# When this gets called $var is NETWORK and $value is what is set in .env for it
    if ${__as_owner} git branch --show-current | grep -q merge-getready; then
        __merge_branch=1
    else
        __merge_branch=0
    fi
    __switched_branch=0

    if [[ "${__merge_branch}" = 0 && "${value}" =~ "prater" && "${__switched_branch}" = 0 ]]; then
        __switched_branch=1
        echo "Breaking change: Goerli is in merge-getready branch for merge testing"
        echo "Switching you over to that branch automatically."
        #value=goerli
        ${__as_owner} git fetch origin merge-getready
        ${__as_owner} git checkout merge-getready
    elif [[ "${__merge_branch}" = 0 && "${value}" =~ "mainnet" && "${__switched_branch}" = 0 ]]; then
        echo "eth-docker now supports a merge-ready mainnet configuration."
        echo "This functionality is currently in testing, and there may be bugs."
        echo
        while true; do
            read -rp "Do you wish to switch to a merge-ready configuration? (n/y) " yn
            case $yn in
                [Yy]* )
                    echo "Switching over to merge-getready branch."
                    __switched_branch=1
                    ${__as_owner} git fetch origin merge-getready
                    ${__as_owner} git checkout merge-getready
                    break
                    ;;
                * ) break;;
            esac
        done
    fi
}

migrate_compose_file() {
# When this gets called $var is COMPOSE_FILE and $value is what is set in .env for it
# Some files have been renamed and others removed altogether
    FROM_YML=( ec-shared.yml ec-traefik.yml cc-shared.yml grafana-insecure.yml prysm-web-insecure.yml lh-base-notz.yml lh-validator-notz.yml teku-base-notz.yml teku-validator-notz.yml prysm-web.yml blank-grafana.yml lh-grafana.yml lhcc-grafana.yml nimbus-grafana.yml prysm-grafana.yml teku-grafana.yml geth-grafana.yml erigon-grafana.yml oe.yml )
    TO_YML=( el-shared.yml el-traefik.yml cl-shared.yml grafana-shared.yml prysm-web-shared.yml lh-base.yml lh-validator.yml teku-base.yml teku-validator.yml "" "" "" "" "" "" "" "" "" "" )
# These files were removed from main branch and are only present in rpc-nodes now
    ADV_YML=( lh-consensus.yml lh-stats-consensus.yml lh-stats-validator.yml lodestar-consensus.yml lodestar-validator.yml nimbus-consensus.yml prysm-consensus.yml prysm-validator.yml teku-consensus.yml traefik-shared.yml )

    __old_grafana=0
    __new_grafana=0
    __grafana_regex=".+-grafana\.yml"
    if ${__as_owner} git branch --show-current | grep -q rpc-nodes; then
        __rpc_branch=1
    else
        __rpc_branch=0
    fi
    __switched_branch=0
    __old_ifs="$IFS"
    IFS=":"
    set -o noglob
    __ymlarray=($value) # split+glob with glob disabled, and split using : as delimiter
    set +o noglob
    IFS="$__old_ifs"

    value=""
    for n in "${!__ymlarray[@]}"; do
        __ymlfile="${__ymlarray[n]}"
        if [[ "${__ymlfile}" =~ $__grafana_regex ]]; then
            __old_grafana=1
        fi
        if [ "${__ymlfile}" = "grafana.yml" ]; then
            __new_grafana=1
        fi
        for index in "${!FROM_YML[@]}"; do
            if [ "${FROM_YML[index]}" = "${__ymlfile}" ]; then
                __ymlfile=${TO_YML[index]}
                break
            fi
        done
        for index in "${!ADV_YML[@]}"; do
            if [ "${__rpc_branch}" = 0 -a "${ADV_YML[index]}" = "${__ymlfile}" -a "${__switched_branch}" = 0 ]; then
                __switched_branch=1
                echo "Breaking change: Consensus and validator yml files are now only in rpc-nodes branch."
                echo "Switching you over to that branch automatically."
                ${__as_owner} git fetch origin rpc-nodes
                ${__as_owner} git checkout rpc-nodes
                break
            fi
        done
        if [ -n "${__ymlfile}" ]; then
            if [ -z "${value}" ]; then
                value="${__ymlfile}"
            else
                value="${value}:${__ymlfile}"
            fi
        fi
    done
    if [ "${__new_grafana}" = 0 -a "${__old_grafana}" = 1 ]; then
        value="${value}:grafana.yml"
    fi
}

prune-geth() {
    __non_interactive=0
    while :
    do
        if [ -z ${1+x} ]; then
            break
        fi
        case "$1" in
            --non-interactive)
                __non_interactive=1
                shift
                ;;
            *)
                echo "Error: Unknown option: $1" >&2
                exit 1
                ;;
        esac
    done

    if [ ! -f "./${ENV_FILE}" ]; then
        echo "${ENV_FILE} configuration file not found, aborting."
        exit 1
    fi

    if ! grep -q '^COMPOSE_FILE=.*geth\.yml' "${ENV_FILE}" 2>/dev/null ; then
        echo "You do not appear to be using Geth, aborting."
        exit 1
    fi

    if [ $(df -P /var/lib/docker | awk '/[0-9]%/{print $(NF-2)}') -lt 41943040 ]; then
        echo "You do not have enough free disk space. Make sure this reads at least 40G free (Avail):"
        df -h /var/lib/docker
        echo ""
        echo "Aborting."
        exit 1
    fi

    rpc_line=$(grep '^EL_RPC_PORT=' "${ENV_FILE}")
    regex='^EL_RPC_PORT=([0-9]+)'
    if [[ ! "${rpc_line}" =~ ${regex} ]]; then
        echo "Unable to determine EL_RPC_PORT, aborting."
        exit 1
    else
        rpc_port="${BASH_REMATCH[1]}"
    fi

    sync_status=$(cmd exec -T execution wget -qO- "http://localhost:$rpc_port" --header 'Content-Type: application/json' --post-data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}')
    exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        echo "Unable to connect to Geth: Is it running? Aborting."
        exit 1
    fi

    if [[ ! "${sync_status}" =~ "false" ]]; then
        echo "Geth is not done syncing yet. Sync status:"
        echo "${sync_status}"
        echo ""
        echo "Aborting."
        exit 1
    fi

    node_logs=$(cmd logs --no-color --tail 1000 execution)
    if [[ "${node_logs}" =~ "snapshot generation" && ! "${node_logs}" =~ "Generated state" ]]; then
        echo "Geth has not finished generating a state snapshot yet, aborting."
        exit 1
    fi

    regex='\[([0-9][0-9]-[0-9][0-9])\|([0-9][0-9]:[0-9][0-9]):[0-9.]*\][[:space:]]*Generated state'
    if [[ "${node_logs}" =~ $regex ]]; then
        snap_time=$(date -d "1970-${BASH_REMATCH[1]} ${BASH_REMATCH[2]}" +"%s")
        now_time=$(date +"%s")
        if [ $(($snap_time+2100)) -gt $now_time ]; then
            echo "Please wait 35 minutes after snapshot generation finished. Aborting."
            exit 1
        fi
    fi

    if [ $__non_interactive = 0 ]; then
      while true; do
          read -rp "WARNING - this will stop Geth and prune its database. Do you wish to continue? (No/Yes) " yn
          case $yn in
              [Yy]es ) break;;
              * ) echo "Aborting, no changes made"; exit 1;;
          esac
      done
    fi

    echo ""
    echo "Starting Geth prune"
    echo ""
    cmd run --rm set-prune-marker "touch /var/lib/goethereum/prune-marker"
    cmd stop execution && cmd rm -f execution
    start
    echo ""
    echo "Prune is running, you can observe it with 'sudo ./ethd logs -f execution'"
    echo ""
    echo "There should be three stages: \"Iterating state snapshot\", \"Pruning state data\", and \"Compacting database\". During \
the \"Compacting database\" stage it may not output logs for an hour or so, that is normal."
    echo ""
    echo "When prune is done, which takes 4-5 hours, Geth will automatically start again."
    echo "NB: 'sudo' can be left off the './ethd logs' command if your user is part of the 'docker' group."
    echo ""
}

keyimport() {
    set -Eeuo pipefail
    if [ ! -f "./${ENV_FILE}" ]; then
        echo "${ENV_FILE} configuration file not found, aborting."
        exit 1
    fi
    if grep -q '^COMPOSE_FILE=.*consensus\.yml' "${ENV_FILE}" 2>/dev/null ; then
        echo "eth-docker is configured to run consensus client only, key import not possible"
        exit 1
    fi

    __prysm=0
    __path=''
    __non_interactive=0
    if grep -q '^COMPOSE_FILE=.*prysm.*\.yml' "${ENV_FILE}" 2>/dev/null ; then
        __prysm=1
    fi

    while :
    do
        if [ -z ${1+x} ]; then
            break
        fi
        case "$1" in
            --path)
                if [ -z ${2+x} ]; then
                    echo "--path requires a directory path, aborting"
                    exit 1
                fi
                if [ ! -d $2 ]; then
                    echo "$2 is not a directory"
                    exit 1
                fi
                IFS=$'\n'
                files=$(find $2 -name '*.json')
                unset IFS
                if [ -z "$files" ]; then
                    echo "No .json files found in $2, aborting"
                    exit 1
                fi
                rm -f ./.eth/validator_keys/*
                cp $2/*.json .eth/validator_keys/
                shift 2
                ;;
            --non-interactive)
                if [ -z ${KEYSTORE_PASSWORD+x} ]; then
                    echo "KEYSTORE_PASSWORD not set, aborting"
                    exit 1
                fi
                if [ ${__prysm} = 1 ]; then
                    if [ -z ${WALLET_PASSWORD+x} ]; then
                        echo "Using Prysm and WALLET_PASSWORD not set, aborting"
                        exit 1
                    fi
                fi
                __non_interactive=1
                shift
                ;;
            *)
                echo "Error: Unknown option: $1" >&2
                exit 1
                ;;
        esac
    done
    if [ ${__non_interactive} = 1 ]; then
        cmd run --rm validator-import --non-interactive
    else
        cmd run --rm validator-import
    fi
}

upgrade() {
  update
}

start() {
    cmd up -d eth
}

up() {
    start
}

run() {
    start
}

stop() {
    cmd down --remove-orphans
}

down() {
    stop
}

terminate() {
    while true; do
        read -rp "WARNING - this action will destroy all data stores for this Ethereum node. Do you wish to continue? (No/Yes) " yn
        case $yn in
            [Yy]es ) break;;
            * ) echo "Aborting, no changes made"; exit 1;;
        esac
    done

    down
    docker volume rm $(docker volume ls -q | grep $(basename $(realpath .)))
    echo ""
    echo "All containers stopped and all volumes deleted"
    echo ""
}

restart() {
    stop
    start
}

logs() {
    cmd logs "$@"
}

query_network() {
    # Mainnet or Testnet network
    NETWORK=$(whiptail --notags --title "Select Network" --menu \
    "Which network do you want to run on?" 9 60 3 \
    "prater" "Görli (né Prater) Testnet" \
    "mainnet" "Ethereum Mainnet" \
    "gnosis" "Gnosis Beacon Chain" 3>&1 1>&2 2>&3)

    if [ "${NETWORK}" == "mainnet" ]; then
        EL_NETWORK=mainnet
        echo "You chose to run on Ethereum mainnet"
    elif [ "${NETWORK}" == "prater" ]; then
        EL_NETWORK=goerli
        echo "Breaking change: Goerli is in merge-getready branch for merge testing"
        echo "Switching you over to that branch automatically."
        #value=goerli
        ${__as_owner} git fetch origin merge-getready
        ${__as_owner} git checkout merge-getready
        echo
        echo "Please run ./ethd update so .env gets updated, then ./ethd config again"
        exit 0
#        echo "You chose to run on Prater testnet"
    elif [ "${NETWORK}" == "gnosis" ]; then
        EL_NETWORK=xdai
        echo "You chose to run on Gnosis Beacon Chain"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_deployment() {
    if [ ${NETWORK} = "gnosis" ]; then
      __deployment="node"
    elif uname -a | grep -q aarch64; then
      __deployment=$(whiptail --notags --title "Select deployment type" --menu \
      "What kind of deployment do you want to run?" 11 80 4 \
      "node" "Ethereum node - consensus, execution and validator client" \
      "rocket" "Validator client only - integrate with RocketPool"  3>&1 1>&2 2>&3)
    else
      __deployment=$(whiptail --notags --title "Select deployment type" --menu \
      "What kind of deployment do you want to run?" 12 80 5 \
      "node" "Ethereum node - consensus, execution and validator client" \
      "rocket" "Validator client only - integrate with RocketPool" \
      "blox" "Blox SSV node - consensus, execution and ssv-node" 3>&1 1>&2 2>&3)
    fi

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "Your deployment choice is:" "${__deployment}"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_validator_client() {
    if [ ${NETWORK} = "gnosis" ]; then
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select validator client" --menu \
      "Which validator client do you want to run?" 9 65 2 \
      "lh-validator.yml" "Lighthouse validator client" \
      "teku-validator.yml" "Teku validator client" 3>&1 1>&2 2>&3)
    elif [ "${__deployment}" = "rocket" ]; then
        if uname -a | grep -q aarch64; then
          CONSENSUS_CLIENT=$(whiptail --notags --title "Select validator client" --menu \
          "Which validator client do you want to run?" 9 65 2 \
          "lh-validator.yml" "Lighthouse validator client" \
          "teku-validator.yml" "Teku validator client" 3>&1 1>&2 2>&3)
        else
          CONSENSUS_CLIENT=$(whiptail --notags --title "Select validator client" --menu \
          "Which validator client do you want to run?" 9 65 2 \
          "teku-validator.yml" "Teku validator client" \
          "lh-validator.yml" "Lighthouse validator client" 3>&1 1>&2 2>&3)
        fi
    elif uname -a | grep -q aarch64; then
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select validator client" --menu \
      "Which validator client do you want to run?" 9 65 2 \
      "lh-validator.yml" "Lighthouse validator client" \
      "teku-validator.yml" "Teku validator client" 3>&1 1>&2 2>&3)
    else
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select validator client" --menu \
      "Which validator client do you want to run?" 11 65 4 \
      "teku-validator.yml" "Teku validator client" \
      "lh-validator.yml" "Lighthouse validator client" \
      "lodestar-validator.yml" "Lodestar validator client" \
      "prysm-validator.yml" "Prysm validator client" 3>&1 1>&2 2>&3)
    fi

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "Your validator client file is:" "${CONSENSUS_CLIENT}"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_consensus_client() {
    if [ ${NETWORK} = "gnosis" ]; then
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
      "Which consensus client do you want to run?" 10 65 3 \
      "lh-base.yml" "Lighthouse (Rust) - consensus and validator client" \
      "teku-base.yml" "Teku (Java) - consensus and validator client" 3>&1 1>&2 2>&3)
    elif uname -a | grep -q aarch64; then
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
      "Which consensus client do you want to run?" 10 65 3 \
      "lh-base.yml" "Lighthouse (Rust) - consensus and validator client" \
      "nimbus-base.yml" "Nimbus (Nim) - consensus and validator client" \
      "teku-base.yml" "Teku (Java) - consensus and validator client" 3>&1 1>&2 2>&3)
    else
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
      "Which consensus client do you want to run?" 12 65 5 \
      "teku-base.yml" "Teku (Java) - consensus and validator client" \
      "lh-base.yml" "Lighthouse (Rust) - consensus and validator client" \
      "nimbus-base.yml" "Nimbus (Nim) - consensus and validator client" \
      "lodestar-base.yml" "Lodestar (Javascript) - consensus and validator client" \
      "prysm-base.yml" "Prysm (Go) - consensus and validator client" 3>&1 1>&2 2>&3)
    fi

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "Your consensus client file is:" "${CONSENSUS_CLIENT}"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_consensus_only_client() {
    if [ ${NETWORK} = "gnosis" ]; then
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
      "Which consensus client do you want to run?" 10 65 3 \
      "lh-consensus.yml" "Lighthouse (Rust) - consensus client" \
      "teku-consensus.yml" "Teku (Java) - consensus client" 3>&1 1>&2 2>&3)
    elif uname -a | grep -q aarch64; then
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
      "Which consensus client do you want to run?" 10 65 3 \
      "lh-consensus.yml" "Lighthouse (Rust) - consensus client" \
      "nimbus-consensus.yml" "Nimbus (Nim) - consensus client" \
      "teku-consensus.yml" "Teku (Java) - consensus client" 3>&1 1>&2 2>&3)
    else
      CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
      "Which consensus client do you want to run?" 12 65 5 \
      "teku-consensus.yml" "Teku (Java) - consensus client" \
      "lh-consensus.yml" "Lighthouse (Rust) - consensus client" \
      "nimbus-consensus.yml" "Nimbus (Nim) - consensus client" \
      "lodestar-consensus.yml" "Lodestar (Javascript) - consensus client" \
      "prysm-consensus.yml" "Prysm (Go) - consensus client" 3>&1 1>&2 2>&3)
    fi

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "Your consensus client file is:" "${CONSENSUS_CLIENT}"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_custom_execution_client() {
        EL_CUSTOM_NODE=$(whiptail --title "Configure custom execution client" --inputbox "What is the URL for your custom execution client? (right-click to paste)" 10 60 https://${EL_NETWORK}.infura.io/v3/... 3>&1 1>&2 2>&3)

        exitstatus=$?
        if [ $exitstatus -eq 0 ]; then
            echo "your custom execution client is:" $EL_CUSTOM_NODE
        else
            echo "You chose Cancel."
            exit 1
        fi
}

query_fallback_execution_client() {
	if [ "${CONSENSUS_CLIENT}" == "nimbus-base.yml" -o "${CONSENSUS_CLIENT}" == "nimbus-consensus.yml" ]; then
	    EL_FALLBACK_NODE1=$(whiptail --title "Configure fallback execution client" --inputbox "What is the URL for your fallback execution client? (right-click to paste)" 10 60 "wss://${EL_NETWORK}.infura.io/v3/..." 3>&1 1>&2 2>&3)
        else
	    EL_FALLBACK_NODE1=$(whiptail --title "Configure fallback execution client" --inputbox "What is the URL for your fallback execution client? (right-click to paste)" 10 60 "https://${EL_NETWORK}.infura.io/v3/..." 3>&1 1>&2 2>&3)
        fi
        exitstatus=$?
        if [ $exitstatus -eq 0 ]; then
            echo "your fallback execution client is:" "${EL_FALLBACK_NODE1}"
        else
            echo "You chose Cancel."
            exit 1
        fi
}

query_execution_client() {
    if [ ${NETWORK} = "gnosis" ]; then
      EXECUTION_CLIENT=$(whiptail --notags --title "Select execution client" --menu \
      "Which execution client do you want to run?" 9 60 2 \
      "nm.yml" "Nethermind (.NET)" 3>&1 1>&2 2>&3)
    elif uname -a | grep -q aarch64; then
      EXECUTION_CLIENT=$(whiptail --notags --title "Select execution client" --menu \
      "Which execution client do you want to run?" 9 60 3 \
      "besu.yml" "Besu (Java)" \
      "nm.yml" "Nethermind (.NET)" \
      "geth.yml" "Geth (Go)" 3>&1 1>&2 2>&3)
    else
      EXECUTION_CLIENT=$(whiptail --notags --title "Select execution client" --menu \
      "Which execution client do you want to run?" 12 60 5 \
      "besu.yml" "Besu (Java)" \
      "geth.yml" "Geth (Go)" \
      "erigon.yml" "Erigon (Go)" \
      "nm.yml" "Nethermind (.NET)" 3>&1 1>&2 2>&3)
    fi

    exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        echo "You chose Cancel."
        exit 1
    fi

    if [ "${EXECUTION_CLIENT}" == "NONE" ]; then
        unset EXECUTION_CLIENT
        query_custom_execution_client
        EL_NODE="${EL_CUSTOM_NODE}"
    else
        echo "Your execution client file is:" "${EXECUTION_CLIENT}"
        if [ "${CONSENSUS_CLIENT}" == "nimbus-base.yml" -o "${CONSENSUS_CLIENT}" == "nimbus-consensus.yml" ]; then
            EL_NODE="ws://execution:8546"
        else
            EL_NODE="http://execution:8545"
        fi
    fi
    EL_FALLBACK_NODE1="${EL_NODE}"
    EL_FALLBACK_NODE2="${EL_NODE}"
}

query_grafana() {
    if (whiptail --title "Select Option" --yesno "Do you want to use Grafana dashboards?" 10 60) then
        GRAFANA_CLIENT="grafana.yml:grafana-shared.yml"
    else
        unset GRAFANA_CLIENT
    fi
}

query_remote_beacon() {
    if [ "${__deployment}" = "rocket" ]; then
        REMOTE_BEACON=$(whiptail --title "Configure remote consensus client" --inputbox "What is the URL for your remote consensus client? (right-click to paste)" 10 60 "http://eth2:5052" 3>&1 1>&2 2>&3)
    else
        REMOTE_BEACON=$(whiptail --title "Configure remote consensus client" --inputbox "What is the URL for your remote consensus client? (right-click to paste)" 10 60 3>&1 1>&2 2>&3)
    fi

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "your remote consensus client is:" "${REMOTE_BEACON}"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_graffiti() {
    GRAFFITI=$(whiptail --title "Configure Graffiti" --inputbox "What Graffiti do you want to send with your blocks? (up to 32 characters)" 10 37 "eth-docker" 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "your Graffiti is:" "${GRAFFITI}"
    else
        echo "You chose Cancel."
        exit 1
    fi
}

query_rapid_sync() {
    # Assume no to start
    RAPID_SYNC_URL=""

    if (whiptail --title "Select Option" --yesno "Do you want to use CL rapid sync with remote checkpoint, e.g. Infura?" 10 60) then
        query_remote_beacon
        RAPID_SYNC_URL="${REMOTE_BEACON}"
    fi
}

query_coinbase() {
    while true; do
        FEE_RECIPIENT=$(whiptail --title "Configure Rewards Address" --inputbox "What is the address you want transaction rewards to be sent to? (right-click to paste, CANNOT be an ENS)" 10 60 3>&1 1>&2 2>&3)

        exitstatus=$?
        if [ $exitstatus -eq 0 ]; then
            if [[ ${FEE_RECIPIENT} == 0x* && ${#FEE_RECIPIENT} -eq 42 ]]; then
              echo "Your rewards address is:" ${FEE_RECIPIENT}
              break
            else
              whiptail --msgbox "${FEE_RECIPIENT} is not a valid ETH address. You can try again or Cancel on the next screen.\n\nThe client will not start successfully until a valid ETH rewards address has been set." 16 75
            fi
        else
            echo "You chose Cancel."
            echo
            echo "Please make requested changes manually or run \"./ethd update\" again"
            echo "before running \"./ethd restart\"."
            echo
            echo "For example, without a FEE_RECIPIENT set in \".env\", containers will not"
            echo "start successfully. Already running containers will keep running with the"
            echo "old configuration until you are ready to restart them."
            echo
            # If this is called by an older version of ethd, envmigrate
            # is in its own bash instance: Need to kill the ethd parent
            if ps $PPID | grep -q "ethd"; then
                kill $PPID
            fi
            exit 1
        fi
    done
}

set_value_in_env() {
    # Assumes that "var" has been set to the name of the variable to be changed
    if [ "${!var+x}" ]; then
        if ! grep -qF "${var}" "${ENV_FILE}" 2>/dev/null ; then
            echo "${var}=${!var}" >> "${ENV_FILE}"
        else
            sed -i'.original' -e "s~^\(${var}\s*=\s*\).*$~\1${!var}~" "${ENV_FILE}"
        fi
    fi
}

config () {
	if [[ "$__distro" = "ubuntu" && -n $(which snap) && -n $(snap list 2>/dev/null | grep -w "docker") ]]; then
        echo
        echo "WARNING! Snap docker package detected. This WILL result in issues."
        echo "Removing the package will delete volumes and require a resync,"
        echo "as well as re-import of all validator keys."
        echo
        echo "Doing so is still highly recommended however."
        echo
        echo "The exact steps depend a little on whether there already is"
        echo "an apt version of docker installed as well, but in a nutshell"
        echo '"sudo snap remove --purge docker" and then reinstall docker.io"'
        echo "or docker-ce with apt, re-import keys and restart eth-docker."
        echo
        echo "Do join us on EthStaker Discord to work through this emergency."
        echo
        echo "Aborting, this is not safe."
        exit 1
   fi
    # Create ENV file if needed
    if ! [[ -f "${ENV_FILE}" ]]; then
        ENV_TEMPLATE="default.env"

        echo "Your configuration file template is:" "${ENV_TEMPLATE}"

        if [ "${EUID}" -eq 0 ]; then
          sudo -u "${OWNER}" cp "${ENV_TEMPLATE}" "${ENV_FILE}"
        else
          cp "${ENV_TEMPLATE}" "${ENV_FILE}"
        fi
    fi

    query_network
    query_deployment
    case "${__deployment}" in
      "node" | "blox" )
        query_consensus_client
        ;;
      "validator" | "rocket")
        query_validator_client
        ;;
      "rpc")
        query_consensus_only_client
        ;;
      *)
        echo "Unknown deployment ${__deployment}, this is a bug."
        exit 1
        ;;
    esac

    if [[ ! "${CONSENSUS_CLIENT}" =~ "-validator.yml" ]]; then
        CL_NODE="http://consensus:5052"

        query_execution_client
        query_rapid_sync
        query_grafana
        if [ ! ${__deployment} = "rpc" ]; then
          query_coinbase
        fi
        if [ ${__deployment} = "node" ]; then
          query_graffiti
        fi
    else
        unset EXECUTION_CLIENT
        unset GRAFANA_CLIENT

        query_remote_beacon
        CL_NODE="${REMOTE_BEACON}"
        query_coinbase
        query_graffiti
    fi

    COMPOSE_FILE="${CONSENSUS_CLIENT}"
    if [ "${EXECUTION_CLIENT+x}" ]; then
        COMPOSE_FILE="${COMPOSE_FILE}:${EXECUTION_CLIENT}"
    fi
    if [ "${__deployment}" = "blox" ]; then
        COMPOSE_FILE="${COMPOSE_FILE}:blox-ssv.yml"
    fi
    if [ "${__deployment}" = "rocket" ]; then
        COMPOSE_FILE="${COMPOSE_FILE}:ext-network.yml"
        sed -i'.original' -e "s~name: traefik_default~name: rocketpool_net~" ext-network.yml
    fi
    if [ "${GRAFANA_CLIENT+x}" ]; then
        COMPOSE_FILE="${COMPOSE_FILE}:${GRAFANA_CLIENT}"
    fi

    echo "Your COMPOSE_FILE is:" "${COMPOSE_FILE}"


    var=FEE_RECIPIENT
    set_value_in_env
    var=GRAFFITI
    set_value_in_env
    var=HOST_IP
    set_value_in_env
    var=CL_NODE
    set_value_in_env
    var=RAPID_SYNC_URL
    set_value_in_env
    var=COMPOSE_FILE
    set_value_in_env
    var=EL_NODE
    set_value_in_env
    var=EL_FALLBACK_NODE1
    set_value_in_env
    var=EL_FALLBACK_NODE2
    set_value_in_env
    var=NETWORK
    set_value_in_env
    var=EL_NETWORK
    set_value_in_env

    if [[ "${EUID}" -eq 0 || -n $(id -nG $(id -u) | grep -w "docker") ]]; then
        cmd build --pull
        exec 3>&1
        exec 4>&2
        exec 1> /dev/null
        exec 2> /dev/null
        cmd pull || true
        exec 1>&3
        exec 2>&4
    fi
}

printhelp() {
    me=$(basename "${BASH_SOURCE}")
    echo "usage: ${me} [help|-h|--help] <subcommand>"
    echo ""
    echo "optional arguments:"
    echo "  help | -h | --help"
    echo "    print this message and exit"
    echo ""
    echo "subcommands:"
    echo "  config "
    echo "     configures eth-docker with your choice of Ethereum clients"
    echo "  keyimport [--non-interactive | --path ] "
    echo "     import validator keys from .eth/validator_keys "
    echo "     --path specifies an alternate import path "
    echo "     --non-interactive is for use from another script, "
    echo "       in which case KEYSTORE_PASSWORD must be set to the password "
    echo "       shared by all keystore-m json files, and in the case of Prysm, "
    echo "       WALLET_PASSWORD must be set to the password for Prysm's wallet "
    echo "  update [--keep-targets] "
    echo "     updates all client versions and eth-docker itself"
    echo "     --keep-targets will keep your custom build targets in .env"
    echo "  start"
    echo "     starts the Ethereum node software"
    echo "  stop"
    echo "     stops the Ethereum node software"
    echo "  restart"
    echo "     restarts the Ethereum node software, a combination of stop and start"
    echo "  logs"
    echo "     shows logs"
    echo "  cmd <command>"
    echo "     executes an arbitrary docker-compose command. Use \"cmd help\" to list them"
    echo "  terminate"
    echo "     stops the Ethereum node software and destroys all data stores"
    echo "  prune-geth"
    echo "     stops the Geth execution client and prunes its DB. This takes about 4-5 hours"
    echo ""
    echo ""
    echo "The logs subcommand can be appended by flags and specify the container(s). example: "
    echo ""
    echo "  $me logs -f --tail 500 execution"
    echo "    shows logs only for execution service"
    echo ""
    echo ""
    echo "Be sure to run the config command as a non-root user, and all other commands"
    echo "either with sudo, or as a user who is part of the \"docker\" group"
    echo ""
    exit 0
}

if [[ "$#" -eq 0 || "$1" == "help" || "$1" == "-h" || "$1" == "--help" ]]; then
    printhelp
fi

cd $(dirname $(realpath ${BASH_SOURCE}))
# Use this to make sure root doesn't end up owning files
if [[ "$OSTYPE" == "darwin"* ]]; then
    OWNER=$(stat -f '$Su' .)
else
    OWNER=$(stat -c '%U' .)
fi

if [ "${OWNER}" == "root" ]; then
    echo "Please install eth-docker as a non-root user."
    exit 1
fi

ENV_FILE=.env

command="$1"
shift

determine_distro
determine_compose
handle_root

if ! type -P whiptail >/dev/null 2>&1; then
    echo "Please install the package whiptail or newt before running this script"
    exit 1
fi

"$command" $@
